---
import { getEntries } from "astro:content";
import { type CollectionEntry, getCollection, render } from "astro:content";
import { getEntry } from "astro:content";
import MemberBadge from "@/components/MemberBadge.astro";
import MarkdownLayout from "@/layouts/MarkdownLayout.astro";
import { Icon } from "astro-icon/components";
import { format } from "date-fns";
import { css } from "styled-system/css";
export async function getStaticPaths() {
  const contests = await getCollection("contests");
  return contests.map((contest) => ({
    params: { slug: contest.id },
    props: contest,
  }));
}

type Props = CollectionEntry<"contests">;
const contest = Astro.props;
const { Content } = await render(contest);

const members = await getEntries(contest.data.members);

// Writeupの取得
const writeupCollection = await Promise.all(
  (
    await getCollection("writeup", (d) => {
      return d.data.contest.id === contest.id;
    })
  ).map(async (w) => ({
    ...w,
    author: await getEntry(w.data.author),
  })),
);

const hasWriteup = writeupCollection.length > 0;

const writeupCategorized = Object.groupBy(
  writeupCollection.map((w) => ({
    category: w.data.category,
    id: w.id,
    title: w.data.title,
    author: w.author,
  })),
  (writeup) => {
    return writeup.category;
  },
);

// Writeup(md,mdx)のレンダリング
const writeupRenderedList = await Promise.all(
  writeupCollection.map(async (writeup) => {
    const { Content } = await render(writeup);
    return {
      ...writeup,
      author: await getEntry(writeup.data.author),
      content: Content,
    };
  }),
);
---

<MarkdownLayout>
  <div>
    <h1 class={css({ fontSize: "4xl", fontWeight: "bold" })}>
      {contest.data.title}
    </h1>
    <div class={css({mb: "4" })}>
      {members.map((member, i) => (
        <>
          {i > 0 && ", "}
          
          <MemberBadge name={member.data.name} image={member.data.image} />
        </>
      ))}
    </div>
    <div class={css({ display: "grid", gridTemplateColumns: "auto 1fr", gap:"{spacing.1} {spacing.4}"})}>
       <span><Icon
        name="mdi:calendar-clock"
        class={css({
          display: "inline",
          fontSize: "2xl",
          mr: "1",
        })}
      />開催期間(JST)</span> <span>{format(contest.data.startDate, "yyyy/MM/dd HH:mm")} - {
        format(contest.data.endDate, "yyyy/MM/dd HH:mm")
      }</span>
      <span><Icon
        name="mdi:medal"
        class={css({
          display: "inline",
          fontSize: "2xl",
          mr: "1",
        })}
      />結果</span> <span>
        {contest.data.result}
      </span>
      {
        contest.data.externalUrl && (
            <span>
              <Icon
              name="mdi:web"
              class={css({
                display: "inline",
                fontSize: "2xl",
                mr: "1",
              })}
            />
              CTF Website
            </span>
            <a
              href={contest.data.externalUrl}
              target="_blank"
              rel="noopener noreferrer"
            >
              {contest.data.externalUrl}
            </a>
        )
      }
      {
        contest.data.ctfTimeUrl && (
            <span>
              <Icon
              name="mdi:flag"
              class={css({
                display: "inline",
                fontSize: "2xl",
                mr: "1",
              })}
            />
              CTFTime
            </span>
            <a
              href={contest.data.ctfTimeUrl}
              target="_blank"
              rel="noopener noreferrer"
            >
              {contest.data.ctfTimeUrl}
            </a>
        )
      }
    </div>
  </div>
  <hr class={css({margin:"{spacing.4} 0"})}/>
  <Content />
  {hasWriteup && (<><h1>Writeup</h1>
  <div> 
    {
      Object.entries(writeupCategorized).map(([category, writeups]) => (
          <div>
          <p class={css({
            fontSize: "2xl",
            fontWeight: "bold",
          })}>{category}</p>
          <ul>
            {writeups?.map((writeup) => (
              <li>
                <a href={`#${writeup.id}`}>{writeup.title} by <MemberBadge name={writeup.author.data.name} image={writeup.author.data.image}/></a>
              </li>
            ))}
          </ul>
        </div>
      ))
    }
  </div>
  <hr class={css({margin:"{spacing.4} 0",color:"border"})}/>
 <div>
  {
    writeupRenderedList.map(w=>(<div class="markdown" id={w.id}>
      <div class={css({marginBottom:"4"})}>
        <h2>
          <a class="headings-anchor" href={`#${w.id}`}>{w.data.title}</a>
        </h2>
        category: {w.data.category} <br/>
        author: <MemberBadge name={w.author.data.name} image={w.author.data.image}></MemberBadge> <br/>
      </div>

      <w.content/>

      <hr class={css({margin:"{spacing.4} 0",color:"border"})}/>
    </div>))
  }
 </div>
  </>
  )}
</MarkdownLayout>
